//キューブ配列を生成するクラス

var initCubeArray = [
    [ [0], [1], [0] ],
    [ [2], [0], [1] ],
    [ [0], [0], [0] ],
    [ [0], [1], [0] ]
];

var initCubeArray2 = [
    [(0|Math.random()*2),(Math.round(Math.random()*2)),(Math.floor(Math.random()*2))],
    [(Math.floor(Math.random()*2)),(Math.round(Math.random()*2)),(Math.floor(Math.random()*2))],
    [(Math.floor(Math.random()*2)),(Math.round(Math.random()*2)),(Math.floor(Math.random()*2))],
    [(Math.floor(Math.random()*2)),(Math.round(Math.random()*2)),(Math.floor(Math.random()*2))]
];


//******************************
//問題配列
//******************************
var problems = new Array();

//レベル0(1st Stage)
problems[0] = new Array();
problems[0][0] = [
    [0,0,2,2],
    [1,0,0,0]
];
problems[0][0].aim = 3;

problems[0][1] = [
    [0,1,1,0],
    [0,1,1,0]
];
problems[0][1].aim = 1;

problems[0][2] = [
    [0,1,0,0],
    [0,0,1,0]
];
problems[0][2].aim = 1

problems[0][3] = [
    [0,2,0,0],
    [0,0,0,1]
];
problems[0][3].aim = 4;

problems[0][4] = [
    [0,0,0,0],
    [1,0,0,1]
];
problems[0][4].aim = 2;

problems[0][5] = [
    [0,0,0,0],
    [1,1,0,1]
];
problems[0][5].aim = 2;

problems[0][6] = [
    [0,0,0,0],
    [0,1,1,0],
    [0,1,1,0]
];
problems[0][6].aim = 1;

problems[0][7] = [
    [0,1,0,1],
    [0,1,0,1],
    [0,1,0,1]
];
problems[0][7].aim = 2;

problems[0][8] = [
    [0,0,0,0],
    [0,0,1,0],
    [1,0,2,0]
];
problems[0][8].aim = 3;

problems[0][9] = [
    [0,0,0,0],
    [0,0,0,0],
    [0,0,2,2],
    [1,0,2,1]
];
problems[0][9].aim = 4;

problems[0][10] = [
    [0,0,0,0],
    [0,0,0,0],
    [0,0,0,0],
    [1,1,1,1]
];
problems[0][10].aim = 3;

problems[0][11] = [
    [0,0,0,0],
    [1,0,0,1],
    [0,1,0,0],
    [0,0,1,0]
];
problems[0][11].aim = 2;




//レベル1
problems[1] = new Array();
problems[1][0] = [
    [0,2,0,0],
    [0,0,0,0],
    [1,0,2,1],
    [0,0,2,0],
    [0,0,0,0]
];
problems[1][1] = [
    [0,0,0,0],
    [0,0,0,0],
    [1,0,0,1],
    [2,2,1,2],
    [0,0,0,0]
];
problems[1][2] = [
    [0,0,0,0],
    [1,2,0,1],
    [0,0,2,0],
    [0,0,0,0],
    [1,0,0,1]
];
problems[1][3] = [
    [0,0,0,2],
    [0,0,0,0],
    [0,0,0,0],
    [1,1,0,0],
    [0,2,1,2]
];
problems[1][4] = [
    [0,1,0,0],
    [0,0,2,2],
    [0,0,0,0],
    [1,0,0,0],
    [2,0,1,0]
];
problems[1][5] = [
    [0,2,0,0],
    [0,0,0,1],
    [0,0,0,0],
    [0,0,1,0],
    [0,1,0,2]
];
problems[1][6] = [
    [0,1,0,0],
    [0,0,2,0],
    [1,2,1,0],
    [0,0,2,0],
    [0,0,0,0]
    [1,0,0,1],
];
problems[1][7] = [
    [0,0,0,2],
    [0,1,0,0],
    [0,0,0,2],
    [2,0,0,0],
    [2,0,0,0]
    [2,1,1,0],
];
problems[1][8] = [
    [0,0,0,0],
    [0,0,0,0],
    [0,0,2,1],
    [1,0,2,2],
    [0,2,0,0]
    [0,2,0,1],
];
problems[1][9] = [
    [0,0,1,0],
    [2,0,0,0],
    [0,1,2,2],
    [0,0,0,0],
    [1,0,0,1]
    [2,2,0,0],
];
problems[1][10] = [
    [1,0,0,0],
    [0,0,1,0],
    [0,0,2,2],
    [1,0,0,1],
    [2,2,0,0]
    [0,0,0,1],
];
problems[1][11] = [
    [0,0,0,0],
    [2,1,0,0],
    [0,0,2,1],
    [0,2,2,2],
    [0,0,0,0]
    [0,1,0,1],
];

//レベル2
problems[2] = new Array();
problems[2][0] = [
    [2,2,0,1,0],
    [0,0,2,0,0],
    [1,0,0,2,1],
    [0,0,2,0,0]
];
problems[2][1] = [
    [0,0,0,2,2],
    [0,0,2,0,0],
    [1,0,0,0,0],
    [2,2,2,0,1]
];
problems[2][2] = [
    [0,0,0,0,0],
    [0,2,0,1,0],
    [0,1,2,2,1],
    [1,0,0,2,0]
];
problems[2][3] = [
    [0,0,2,0,0],
    [2,0,0,0,0],
    [0,2,0,0,1],
    [1,0,0,1,0],
    [2,2,0,1,0]
];
problems[2][4] = [
    [2,0,0,0,0],
    [0,0,1,0,0],
    [0,0,0,2,2],
    [0,1,0,1,0],
    [1,2,0,2,0]
];
problems[2][5] = [
    [0,0,0,0,0],
    [0,2,0,0,0],
    [1,0,2,2,1],
    [0,0,0,0,0],
    [1,0,2,0,1]
];
problems[2][6] = [
    [0,0,0,1,0],
    [2,0,0,0,1],
    [2,2,0,0,0],
    [0,1,0,1,2],
    [0,0,0,0,2],
    [0,1,1,0,0]
];
problems[2][8] = [
    [0,0,0,0,0],
    [0,0,0,0,0],
    [1,1,1,0,0],
    [0,0,2,2,2],
    [0,2,0,1,0],
    [0,2,2,0,1]
];
problems[2][9] = [
    [0,0,0,0,0],
    [0,0,0,0,0],
    [0,0,0,0,0],
    [0,2,0,0,0],
    [0,0,0,0,0],
    [1,1,1,1,1]
];
problems[2][10] = [
    [2,0,0,0,0],
    [0,0,0,0,0],
    [0,0,0,1,0],
    [0,0,0,2,0],
    [0,1,1,0,2],
    [1,2,2,2,0]
];
problems[2][11] = [
    [0,0,0,0,0],
    [0,0,1,0,0],
    [0,0,0,0,0],
    [2,1,0,2,0],
    [0,0,2,2,2],
    [1,0,0,2,1]
];
problems[2][12] = [
    [0,0,0,2,2],
    [0,0,0,0,0],
    [0,0,2,0,0],
    [0,1,2,0,0],
    [1,0,2,2,0],
    [2,2,2,0,1]
];
//レベル3
problems[3] = new Array();
problems[3][0] = [
    [0,0,0,0,0],
    [0,0,0,0,0],
    [0,0,0,1,2],
    [0,1,2,0,0],
    [1,2,1,0,2],
    [2,0,0,2,0],
    [0,0,2,0,0]
];
problems[3][1] = [
    [0,0,2,2,2],
    [0,2,0,0,0],
    [0,2,0,1,0],
    [0,2,0,0,0],
    [1,0,2,2,1],
    [1,0,0,2,0],
    [1,0,2,0,0]
];
problems[3][2] = [
    [0,1,0,0,0],
    [0,2,1,0,0],
    [0,0,0,1,1],
    [0,0,2,1,2],
    [1,0,0,0,0],
    [0,0,2,0,0],
    [2,2,2,0,1]
];
problems[3][3] = [
    [0,0,0,0,0],
    [0,0,1,0,0],
    [1,0,0,0,2],
    [2,1,2,1,0],
    [0,2,2,0,0],
    [0,0,0,0,0],
    [0,2,0,1,1]
];
problems[3][4] = [
    [0,0,0,0,0],
    [0,1,0,0,0],
    [2,0,0,0,0],
    [1,2,2,1,0],
    [0,0,0,2,1],
    [0,0,2,2,0],
    [0,0,0,0,0],
    [1,2,2,0,1]
];
problems[3][5] = [
    [0,0,0,0,0],
    [0,0,0,0,0],
    [0,0,0,0,0],
    [2,2,1,2,2],
    [0,1,0,0,1],
    [0,0,0,0,0],
    [0,0,0,0,0],
    [2,1,2,0,1]
];
problems[3][6] = [
    [2,0,0,0,0],
    [0,2,2,0,0],
    [2,0,1,2,1],
    [0,0,0,2,0],
    [0,1,0,2,0],
    [0,1,0,2,0],
    [0,0,2,0,0],
    [1,2,0,0,1]
];
problems[3][7] = [
    [1,1,1,1,1],
    [0,0,0,0,0],
    [0,0,0,0,0],
    [1,0,2,0,0],
    [2,0,2,2,2],
    [0,0,0,0,1],
    [0,0,2,0,1],
    [1,0,0,0,1]
];
//レベル4
problems[4] = new Array();
problems[4][0] = [
    [1,0,0,0,0,0],
    [2,2,2,1,0,1],
    [0,0,0,1,0,2],
    [0,0,0,0,1,2],
    [0,2,0,2,0,2],
    [2,1,2,2,0,0],
];
//reate nX x nY random array
//[nX][nY]
var randomCubeArray = function(nX, nY){
    var result = new Array();
    for(var i=0;i<nX;i++){
        result[i] = new Array();
        for(var j=0;j<nY;j++){
            result[i][j] = Math.round(0|Math.random()*2.2);
        }
    }
    return result;
};

